{"version":3,"sources":["../../lib/esm/index.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Commands","YouTubeIframe","props","videoId","command","iframeVideoRef","useRef","sendCommand","func","args","iframe","current","getAttribute","contentWindow","postMessage","JSON","stringify","useEffect","play","stop","pause","mute","unMute","React","createElement","title","ref","frameBorder","allow","src","App","useState","sampleTwo","setSampleTwo","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mLACWA,E,+CACX,SAAWA,GACPA,EAASA,EAAQ,KAAW,GAAK,OACjCA,EAASA,EAAQ,MAAY,GAAK,QAClCA,EAASA,EAAQ,KAAW,GAAK,OACjCA,EAASA,EAAQ,KAAW,GAAK,OACjCA,EAASA,EAAQ,OAAa,GAAK,SALvC,CAMGA,IAAaA,EAAW,KAC3B,IAuCeC,EAvCK,SAAUC,GAC1B,IAAIC,EAAUD,EAAMC,QAASC,EAAUF,EAAME,QACzCC,EAAiBC,iBAAO,MACxBC,EAAc,SAAUC,EAAMC,GAC9B,IAAIC,EAASL,EAAeM,QACxBD,IACUA,EAAOE,aAAa,QAEtBF,EAAOG,eACPH,EAAOG,cAAcC,YAAYC,KAAKC,UAAU,CAC5C,MAAS,UACT,KAAQR,EACR,KAAQC,GAAQ,KAChB,OAwBpB,OAnBAQ,qBAAU,WACN,OAAQb,GACJ,KAAKJ,EAASkB,KACVX,EAAY,aACZ,MACJ,KAAKP,EAASmB,KACVZ,EAAY,aACZ,MACJ,KAAKP,EAASoB,MACVb,EAAY,cACZ,MACJ,KAAKP,EAASqB,KACVd,EAAY,QACZ,MACJ,KAAKP,EAASsB,OACVf,EAAY,aAGrB,CAACH,IACImB,IAAMC,cAAc,SAAU,CAAEC,MAAOtB,EAASuB,IAAKrB,EAAgBsB,YAAa,IAAKC,MAAO,0EAA2EC,IAAK,iCAAmC1B,EAAU,gD,eCTxN2B,MAhCf,WACI,MAAkCC,mBAAmB/B,EAASoB,OAA9D,mBAAOY,EAAP,KAAkBC,EAAlB,KAEA,OACI,sBAAKC,UAAU,MAAf,UACI,sBAAKA,UAAU,SAAf,UACI,wCACA,cAAC,EAAD,CAAe/B,QAAQ,mBAE3B,uBACA,sBAAK+B,UAAU,SAAf,UACI,8CACA,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,SAEf,cAAC,EAAD,CACI9B,QAAS4B,EACT7B,QAAQ,mBAGhB,sBAAK+B,UAAU,UAAf,UACI,wBAAQC,QAAS,kBAAMF,EAAajC,EAASkB,OAA7C,kBACA,wBAAQiB,QAAS,kBAAMF,EAAajC,EAASoB,QAA7C,mBACA,wBAAQe,QAAS,kBAAMF,EAAajC,EAASqB,OAA7C,kBACA,wBAAQc,QAAS,kBAAMF,EAAajC,EAASsB,SAA7C,oBACA,wBAAQa,QAAS,kBAAMF,EAAajC,EAASmB,OAA7C,4BClBAiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bef9e53d.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nexport var Commands;\r\n(function (Commands) {\r\n    Commands[Commands[\"play\"] = 0] = \"play\";\r\n    Commands[Commands[\"pause\"] = 1] = \"pause\";\r\n    Commands[Commands[\"stop\"] = 2] = \"stop\";\r\n    Commands[Commands[\"mute\"] = 3] = \"mute\";\r\n    Commands[Commands[\"unMute\"] = 4] = \"unMute\";\r\n})(Commands || (Commands = {}));\r\nvar YouTubeIframe = function (props) {\r\n    var videoId = props.videoId, command = props.command;\r\n    var iframeVideoRef = useRef(null);\r\n    var sendCommand = function (func, args) {\r\n        var iframe = iframeVideoRef.current;\r\n        if (iframe) {\r\n            var src = iframe.getAttribute('src');\r\n            if (src) {\r\n                if (iframe.contentWindow) {\r\n                    iframe.contentWindow.postMessage(JSON.stringify({\r\n                        'event': 'command',\r\n                        'func': func,\r\n                        'args': args || []\r\n                    }), '*');\r\n                }\r\n            }\r\n        }\r\n    };\r\n    useEffect(function () {\r\n        switch (command) {\r\n            case Commands.play:\r\n                sendCommand('playVideo');\r\n                break;\r\n            case Commands.stop:\r\n                sendCommand('stopVideo');\r\n                break;\r\n            case Commands.pause:\r\n                sendCommand('pauseVideo');\r\n                break;\r\n            case Commands.mute:\r\n                sendCommand('mute');\r\n                break;\r\n            case Commands.unMute:\r\n                sendCommand('unMute');\r\n                break;\r\n        }\r\n    }, [command]);\r\n    return (React.createElement(\"iframe\", { title: videoId, ref: iframeVideoRef, frameBorder: '0', allow: 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture', src: \"https://www.youtube.com/embed/\" + videoId + \"?modestbranding=1&enablejsapi=1&controls=0\" }));\r\n};\r\nexport default YouTubeIframe;\r\n","import React, { useState } from 'react';\r\nimport YouTubeIframe, { Commands } from 'react-youtube-iframe';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    const [sampleTwo, setSampleTwo] = useState<Commands>(Commands.pause);\r\n\r\n    return (\r\n        <div className='App'>\r\n            <div className='sample'>\r\n                <h2>Simple</h2>\r\n                <YouTubeIframe videoId='44XYEeD1A1U' />\r\n            </div>\r\n            <hr/>\r\n            <div className='sample'>\r\n                <h2>With actions</h2>\r\n                <div className='with-mask'>\r\n                    <div className='mask'/>\r\n\r\n                    <YouTubeIframe\r\n                        command={sampleTwo}\r\n                        videoId='pAgnJDJN4VA'\r\n                    />\r\n                </div>\r\n                <div className='actions'>\r\n                    <button onClick={() => setSampleTwo(Commands.play)}>play</button>\r\n                    <button onClick={() => setSampleTwo(Commands.pause)}>pause</button>\r\n                    <button onClick={() => setSampleTwo(Commands.mute)}>mute</button>\r\n                    <button onClick={() => setSampleTwo(Commands.unMute)}>unmute</button>\r\n                    <button onClick={() => setSampleTwo(Commands.stop)}>stop</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}